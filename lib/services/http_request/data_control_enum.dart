import 'package:educacao_criativa/models/cliente_model.dart';
import 'package:educacao_criativa/models/deficiencia_model.dart';
import 'package:educacao_criativa/models/espaco/espaco_model.dart';
import 'package:educacao_criativa/models/estacao_model.dart';
import 'package:educacao_criativa/models/formato_notas_model.dart';
import 'package:educacao_criativa/models/item_model.dart';
import 'package:educacao_criativa/models/material_apoio/material_apoio_model.dart';
import 'package:educacao_criativa/models/modalidade_model.dart';
import 'package:educacao_criativa/models/periodicidade_model.dart';
import 'package:educacao_criativa/models/serie_model.dart';
import 'package:educacao_criativa/models/tipo_de_unidade_model.dart';
import 'package:educacao_criativa/models/tokens_model.dart';
import 'package:educacao_criativa/models/unidade_model.dart';
import 'package:educacao_criativa/models/usuario_model.dart';

enum DataControlEnum<T> {
  authenticationLogin(
    method: 'post',
    path: 'auth/login',
    firebaseCollection: 'AUTHENTICATION',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar logar no sistema.',
    type: TokensModel,
    fromMapFunction: TokensModel.fromJson,
    isList: false,
  ),
  authenticationGetUser(
    method: 'get',
    path: 'usuario/me',
    firebaseCollection: 'AUTHENTICATION',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter os dados do usu√°rio.',
    type: UsuarioModel,
    fromMapFunction: UsuarioModel.fromJson,
    isList: false,
  ),
  formatoNotasFetch(
    method: 'get',
    path: 'formato-nota',
    firebaseCollection: 'FORMATO-NOTAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de formato de notas.',
    type: FormatoNotasModel,
    fromMapFunction: FormatoNotasModel.fromJson,
    isList: true,
  ),
  formatoNotasCreate(
    method: 'post',
    path: 'formato-nota',
    firebaseCollection: 'FORMATO-NOTAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um novo formato de notas.',
    type: FormatoNotasModel,
    fromMapFunction: FormatoNotasModel.fromJson,
    isList: false,
  ),
  formatoNotasUpdate(
    method: 'put',
    path: 'formato-nota',
    firebaseCollection: 'FORMATO-NOTAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um novo formato de notas.',
    type: FormatoNotasModel,
    fromMapFunction: FormatoNotasModel.fromJson,
    isList: false,
  ),
  formatoNotasDelete(
    method: 'delete',
    path: 'formato-nota/:id',
    firebaseCollection: 'FORMATO-NOTAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um novo formato de notas.',
    type: FormatoNotasModel,
    fromMapFunction: FormatoNotasModel.fromJson,
    isList: false,
  ),
  periodicidadeFetch(
    method: 'get',
    path: 'periodicidade',
    firebaseCollection: 'PERIODICIDADE',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de periodicidade.',
    type: PeriodicidadeModel,
    fromMapFunction: PeriodicidadeModel.fromJson,
    isList: true,
  ),
  periodicidadeCreate(
    method: 'post',
    path: 'periodicidade',
    firebaseCollection: 'PERIODICIDADE',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova periodicidade.',
    type: PeriodicidadeModel,
    fromMapFunction: PeriodicidadeModel.fromJson,
    isList: false,
  ),
  periodicidadeUpdate(
    method: 'put',
    path: 'periodicidade',
    firebaseCollection: 'PERIODICIDADE',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma periodicidade.',
    type: PeriodicidadeModel,
    fromMapFunction: PeriodicidadeModel.fromJson,
    isList: false,
  ),
  periodicidadeDelete(
    method: 'delete',
    path: 'periodicidade/:id',
    firebaseCollection: 'PERIODICIDADE',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma periodicidade.',
    type: PeriodicidadeModel,
    fromMapFunction: PeriodicidadeModel.fromJson,
    isList: false,
  ),
  deficienciaFetch(
    method: 'get',
    path: 'deficiencia',
    firebaseCollection: 'DEFICIENCIAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de deficiencias.',
    type: DeficienciaModel,
    fromMapFunction: DeficienciaModel.fromJson,
    isList: true,
  ),
  deficienciaCreate(
    method: 'post',
    path: 'deficiencia',
    firebaseCollection: 'DEFICIENCIAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova deficiencia.',
    type: DeficienciaModel,
    fromMapFunction: DeficienciaModel.fromJson,
    isList: false,
  ),
  deficienciaUpdate(
    method: 'put',
    path: 'deficiencia',
    firebaseCollection: 'DEFICIENCIAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma deficiencia.',
    type: DeficienciaModel,
    fromMapFunction: DeficienciaModel.fromJson,
    isList: false,
  ),
  deficienciaDelete(
    method: 'delete',
    path: 'deficiencia/:id',
    firebaseCollection: 'DEFICIENCIAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar um tipo de unidade.',
    type: DeficienciaModel,
    fromMapFunction: DeficienciaModel.fromJson,
    isList: false,
  ),
  tipoUnidadeFetch(
    method: 'get',
    path: 'tipo-unidade',
    firebaseCollection: 'TIPO-DE-UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de tipos de unidades.',
    type: TipoDeUnidadeModel,
    fromMapFunction: TipoDeUnidadeModel.fromJson,
    isList: true,
  ),
  tipoUnidadeCreate(
    method: 'post',
    path: 'tipo-unidade',
    firebaseCollection: 'TIPO-DE-UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um novo tipo de unidade.',
    type: TipoDeUnidadeModel,
    fromMapFunction: TipoDeUnidadeModel.fromJson,
    isList: false,
  ),
  tipoUnidadeUpdate(
    method: 'put',
    path: 'tipo-unidade',
    firebaseCollection: 'TIPO-DE-UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar um tipo de unidade.',
    type: TipoDeUnidadeModel,
    fromMapFunction: TipoDeUnidadeModel.fromJson,
    isList: false,
  ),
  tipoUnidadeDelete(
    method: 'delete',
    path: 'tipo-unidade/:id',
    firebaseCollection: 'TIPO-DE-UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar um tipo de unidade.',
    type: TipoDeUnidadeModel,
    fromMapFunction: TipoDeUnidadeModel.fromJson,
    isList: false,
  ),
  modalidadeFetch(
    method: 'get',
    path: 'modalidade',
    firebaseCollection: 'MODALIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de tipos de unidades.',
    type: ModalidadeModel,
    fromMapFunction: ModalidadeModel.fromJson,
    isList: true,
  ),
  modalidadeCreate(
    method: 'post',
    path: 'modalidade',
    firebaseCollection: 'MODALIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um novo tipo de unidade.',
    type: ModalidadeModel,
    fromMapFunction: ModalidadeModel.fromJson,
    isList: false,
  ),
  modalidadeUpdate(
    method: 'put',
    path: 'modalidade',
    firebaseCollection: 'MODALIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar um tipo de unidade.',
    type: ModalidadeModel,
    fromMapFunction: ModalidadeModel.fromJson,
    isList: false,
  ),
  modalidadeDelete(
    method: 'delete',
    path: 'modalidade/:id',
    firebaseCollection: 'MODALIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar um tipo de unidade.',
    type: ModalidadeModel,
    fromMapFunction: ModalidadeModel.fromJson,
    isList: false,
  ),
  serieFetch(
    method: 'get',
    path: 'serie',
    firebaseCollection: 'SERIES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de tipos de series.',
    type: SerieModel,
    fromMapFunction: SerieModel.fromJson,
    isList: true,
  ),
  serieCreate(
    method: 'post',
    path: 'serie',
    firebaseCollection: 'SERIES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova serie.',
    type: SerieModel,
    fromMapFunction: SerieModel.fromJson,
    isList: false,
  ),
  serieUpdate(
    method: 'put',
    path: 'serie',
    firebaseCollection: 'SERIES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma serie.',
    type: SerieModel,
    fromMapFunction: SerieModel.fromJson,
    isList: false,
  ),
  serieDelete(
    method: 'delete',
    path: 'serie/:id',
    firebaseCollection: 'SERIES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma serie.',
    type: SerieModel,
    fromMapFunction: SerieModel.fromJson,
    isList: false,
  ),
  celulaFetch(
    method: 'get',
    path: 'celula',
    firebaseCollection: 'CELULAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de tipos de series.',
    type: EstacaoModel,
    fromMapFunction: EstacaoModel.fromJson,
    isList: true,
  ),
  celulaFetchID(
    method: 'get',
    path: 'celula/:id',
    firebaseCollection: 'CELULAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de tipos de series.',
    type: EstacaoModel,
    fromMapFunction: EstacaoModel.fromJson,
    isList: true,
  ),
  celulaCreate(
    method: 'post',
    path: 'celula',
    firebaseCollection: 'CELULAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova celula.',
    type: EstacaoModel,
    fromMapFunction: EstacaoModel.fromJson,
    isList: false,
  ),
  celulaUpdate(
    method: 'put',
    path: 'celula',
    firebaseCollection: 'CELULAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma celula.',
    type: EstacaoModel,
    fromMapFunction: EstacaoModel.fromJson,
    isList: false,
  ),
  celulaDelete(
    method: 'delete',
    path: 'celula/:id',
    firebaseCollection: 'CELULAS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma celula.',
    type: EstacaoModel,
    fromMapFunction: null,
    isList: false,
  ),
  materiaisDeApoioFetch(
    method: 'get',
    path: 'material-apoio',
    firebaseCollection: 'MATERIAIS-APOIO',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de materiais de apoio.',
    type: MaterialApoioModel,
    fromMapFunction: MaterialApoioModel.fromJson,
    isList: true,
  ),
  itensFetch(
    method: 'get',
    path: 'item',
    firebaseCollection: 'ITENS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de itens.',
    type: ItemModel,
    fromMapFunction: ItemModel.fromJson,
    isList: true,
  ),
  itensCreate(
    method: 'post',
    path: 'item',
    firebaseCollection: 'ITENS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova itens.',
    type: ItemModel,
    fromMapFunction: ItemModel.fromJson,
    isList: false,
  ),
  itensUpdate(
    method: 'put',
    path: 'item',
    firebaseCollection: 'ITENS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma itens.',
    type: ItemModel,
    fromMapFunction: ItemModel.fromJson,
    isList: false,
  ),
  itensDelete(
    method: 'delete',
    path: 'item/:id',
    firebaseCollection: 'ITENS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma itens.',
    type: ItemModel,
    fromMapFunction: ItemModel.fromJson,
    isList: false,
  ),
  usuariosClienteFetch(
    method: 'get',
    path: 'usuario?cliente',
    firebaseCollection: 'USUARIOS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de usu√°rios.',
    type: UsuarioModel,
    fromMapFunction: UsuarioModel.fromJson,
    isList: true,
  ),
  clientesFetch(
    method: 'get',
    path: 'cliente',
    firebaseCollection: 'CLIENTES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de clientes.',
    type: ClienteModel,
    fromMapFunction: ClienteModel.fromJson,
    isList: true,
  ),
  clientesCreate(
    method: 'post',
    path: 'cliente',
    firebaseCollection: 'CLIENTES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova cliente.',
    type: ClienteModel,
    fromMapFunction: ClienteModel.fromJson,
    isList: false,
  ),
  clientesUpdate(
    method: 'put',
    path: 'cliente',
    firebaseCollection: 'CLIENTES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma cliente.',
    type: ClienteModel,
    fromMapFunction: ClienteModel.fromJson,
    isList: false,
  ),
  clientesDelete(
    method: 'delete',
    path: 'cliente/:id',
    firebaseCollection: 'CLIENTES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma cliente.',
    type: ClienteModel,
    fromMapFunction: ClienteModel.fromJson,
    isList: false,
  ),
  unidadesFetch(
    method: 'get',
    path: 'unidade',
    firebaseCollection: 'UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de unidades.',
    type: UnidadeModel,
    fromMapFunction: UnidadeModel.fromJson,
    isList: true,
  ),
  unidadesCreate(
    method: 'post',
    path: 'unidade',
    firebaseCollection: 'UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova unidade.',
    type: UnidadeModel,
    fromMapFunction: UnidadeModel.fromJson,
    isList: false,
  ),
  unidadesUpdate(
    method: 'put',
    path: 'unidade',
    firebaseCollection: 'UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma unidade.',
    type: UnidadeModel,
    fromMapFunction: null,
    isList: false,
  ),
  unidadesDelete(
    method: 'delete',
    path: 'unidade/:id',
    firebaseCollection: 'UNIDADES',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma unidade.',
    type: UnidadeModel,
    fromMapFunction: null,
    isList: false,
  ),
  espacosFetch(
    method: 'get',
    path: 'espaco',
    firebaseCollection: 'ESPACOS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar obter a lista de espacos.',
    type: EspacoModel,
    fromMapFunction: EspacoModel.fromJson,
    isList: true,
  ),
  espacosCreate(
    method: 'post',
    path: 'espaco',
    firebaseCollection: 'ESPACOS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar cadastrar um nova espaco.',
    type: EspacoModel,
    fromMapFunction: EspacoModel.fromJson,
    isList: false,
  ),
  espacosUpdate(
    method: 'put',
    path: 'espaco',
    firebaseCollection: 'ESPACOS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar editar uma espaco.',
    type: EspacoModel,
    fromMapFunction: EspacoModel.fromJson,
    isList: false,
  ),
  espacosDelete(
    method: 'delete',
    path: 'espaco/:id',
    firebaseCollection: 'ESPACOS',
    loadingMessage: '',
    errorMessage: 'Ocorreu um erro ao tentar deletar uma unidade.',
    type: EspacoModel,
    fromMapFunction: EspacoModel.fromJson,
    isList: false,
  );

  const DataControlEnum({
    required this.method,
    required this.path,
    required this.firebaseCollection,
    required this.loadingMessage,
    required this.errorMessage,
    required this.type,
    required this.fromMapFunction,
    required this.isList,
  });

  final String method;
  final String path;
  final String firebaseCollection;
  final String loadingMessage;
  final String errorMessage;
  final Type type;
  final Function(Map<String, dynamic>)? fromMapFunction;
  final bool isList;
}
